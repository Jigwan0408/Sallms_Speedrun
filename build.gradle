plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'io.stcat.jake48'

// 1. 버전 정보 파일 불러오기
def versionPropsFile = file('version.properties')
def versionProps = new Properties()
versionProps.load(new FileInputStream(versionPropsFile))

// 2. 버전 파싱 및 증가
def currentVersion = versionProps['pluginVersion']
def versionParts = currentVersion.tokenize('.')
def major = versionParts[0]
def minor = versionParts[1]
def patch = versionParts[2].toInteger() + 1 // 마지막 패치 버전을 1 올립니다.
def newVersion = "$major.$minor.$patch".toString() // 새 버전 문자열 생성 (예: "1.0.1")


// 3. 프로젝트 버전으로 설정
version = newVersion

// 4. 증가된 새 버전을 다시 파일에 저장 (다음 빌드를 위해)
versionProps['pluginVersion'] = newVersion
versionProps.store(versionPropsFile.newWriter(), null)

processResources {
    def props = [version: version]
    inputs.properties(props)
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand(props)
    }
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "worldedit-api"
        url = "https://maven.enginehub.org/repo/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    compileOnly("com.sk89q.worldedit:worldedit-bukkit:7.3.0")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

// 서버 plugins 폴더 경로
def pluginName = 'Sallms_Speedrun'
def devServerPluginsDir = 'D:/Minecraft/Servers/Plugin_Study-1.21.8/plugins'

// 구버전 '.jar' 파일 삭제 작업
tasks.register('cleanOldJar', Delete) {
    group = 'deployment'
    description = 'Deletes old plugin JARs from the test server'

    // 지정된 폴더에서 패턴과 일치하는 모든 파일 삭제
    delete fileTree(devServerPluginsDir).matching {
        include "${pluginName}-*.jar"
    }
}

// '.jar' 파일 복사 작업
tasks.register('copyJar', Copy) {
    group = 'deployment'
    dependsOn 'build', tasks.named('cleanOldJar')
    from jar
    into devServerPluginsDir
}

// 'config.yml' 파일 복사 작업
tasks.register('copyConfig', Copy) {
    group = 'deployment'
    from "src/main/resources"
    include "config.yml"
    into devServerPluginsDir + "/Sallms_Speedrun"
}

// 'deploy'라는 이름으로 두 작업을 한번에 실행하는 작업
tasks.register('deploy') {
    group = 'deployment'
    dependsOn copyJar
    dependsOn copyConfig
    doLast {
        println ">>> Plugin JAR and config.yml successfully deployed to test server."
    }
}

